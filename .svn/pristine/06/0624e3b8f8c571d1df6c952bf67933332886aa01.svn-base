# rsum_list - Recursive version of sum_list
# 韦东良 522031910516

# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
    .align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:	
    irmovq ele1,%rdi
	call rsum_list		# rsum_list(ele1)
	ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
    andq %rdi,%rdi	     # ls = nullptr?
    jne loop             # Return when 0
    xorq %rax,%rax	     # val = 0
	ret                  # Return	
loop:	
    mrmovq (%rdi),%rbx   # val = ls->val
    mrmovq 8(%rdi),%rdi  # ls = ls->next
    pushq %rbx           # Callee save
    call rsum_list       # Call rsum_list(ls)
    popq %rbx            # Get val
    addq %rbx,%rax       # val + rest
	ret                  # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
